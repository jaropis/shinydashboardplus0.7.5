% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boxes.R
\name{updateBoxPlus}
\alias{updateBoxPlus}
\title{Collapse a \link{boxPlus} tag.}
\usage{
updateBoxPlus(
  inputId,
  action = c("remove", "toggle", "restore"),
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{Box to toggle.}

\item{action}{Action to trigger: either collapse, remove or restore.}

\item{session}{Shiny session object.}
}
\description{
Collapse a \link{boxPlus} tag.
}
\examples{
if (interactive()) {
 library(shiny)
 library(shinydashboard)
 library(shinydashboardPlus)
 
 ui <- dashboardPagePlus(
   dashboardHeaderPlus(),
   dashboardSidebar(),
   dashboardBody(
     tags$style("body { background-color: ghostwhite}"),
     fluidRow(
       actionButton("toggle_box", "Toggle Box"),
       actionButton("remove_box", "Remove Box", class = "bg-danger"),
       actionButton("restore_box", "Restore Box", class = "bg-success")
     ),
     br(),
     boxPlus(
       title = textOutput("box_state"),
       "Box body",
       inputId = "mybox",
       collapsible = TRUE,
       closable = TRUE,
       plotOutput("plot")
     )
   )
 )
 
 server <- function(input, output, session) {
   output$plot <- renderPlot({
     req(!input$mybox$collapsed)
     plot(rnorm(200))
   })
   
   output$box_state <- renderText({
     state <- if (input$mybox$collapsed) "collapsed" else "uncollapsed"
     paste("My box is", state)
   })
   
   observeEvent(input$toggle_box, {
     updateBoxPlus("mybox", action = "toggle")
   })
   
   observeEvent(input$remove_box, {
     updateBoxPlus("mybox", action = "remove")
   })
   
   observeEvent(input$restore_box, {
     updateBoxPlus("mybox", action = "restore")
   })
   
   observeEvent(input$mybox$visible, {
     collapsed <- if (input$mybox$collapsed) "collapsed" else "uncollapsed"
     visible <- if (input$mybox$visible) "visible" else "hidden"
     message <- paste("My box is", collapsed, "and", visible)
     showNotification(message, type = "warning", duration = 1)
   })
   
 }
 
 shinyApp(ui, server)
}
}
